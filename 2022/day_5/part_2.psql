-- select * from input;

-- Parsing stacks

create function count_stacks(stack_line text) returns int
  return (char_length(stack_line) + 1) / 4;

create function stack_position(stack_number int) returns int
  return (stack_number * 4) - 2;

create type stacked_crate as (
  stack_number int,
  crate_value text
);

create function parse_stack_line(line text) returns setof stacked_crate
  begin atomic;
    select (
      stack_number,
      nullif(substr(line, stack_position, 1), ' ')
    )::stacked_crate
    from 
      generate_series(1, count_stacks(line)) as stack_number,
      stack_position(stack_number);
  end;

create view starting_stacks as (
  select stack_number, line_number as vertical_position, crate_value
  from input
  join lateral parse_stack_line(line) as stack_info on regexp_like(line, '^\s*\[')
  where crate_value is not null
  order by stack_number, vertical_position
);

-- select * from starting_stacks;

-- Parsing rearrangement procedure

create type rearrangement_procedure_step as (
  quantity int,
  "from" int,
  "to" int
);

create function parse_rearrangement_procedure_step_line(line text) returns rearrangement_procedure_step
  return (
    select (
      match[1]::int,
      match[2]::int, 
      match[3]::int
    )::rearrangement_procedure_step
    from regexp_match(line, '^move (\d+) from (\d+) to (\d+)$') as match (match)
  );

create view rearrangement_procedure as (
  select line, quantity, "from", "to"
  from input
  join lateral parse_rearrangement_procedure_step_line(line) on starts_with(line, 'move ')
);

-- select * from rearrangement_procedure;

-- Setting up table to track state of stacks

create table stacks (
  stack_number int,
  vertical_position int,
  crate_value text,
  primary key (stack_number, vertical_position)
);
insert into stacks select * from starting_stacks;
-- select * from stacks;

create table crane (
  vertical_position int,
  crate_value text
);

-- Functions to manipulate stacks

create function vertical_position_of_highest_crate(/* stack_number */int) returns int
  return (
    select min(vertical_position)
    from stacks 
    where 
      stack_number = $1
      and crate_value is not null
  );

create function vertical_position_of_lowest_free_space(stack_number int) returns int
  return coalesce(vertical_position_of_highest_crate(stack_number), 0) - 1;

create function hoist_crates(/* stack_number */int, quantity int) returns text[]
  begin atomic;
    with 
      hoisted_crate as (
        delete from stacks 
        using vertical_position_of_highest_crate($1)
        where 
          stack_number = $1 
          and vertical_position between symmetric vertical_position_of_highest_crate and vertical_position_of_highest_crate + quantity - 1
        returning *
      ),
      crate_on_crane as (
        insert into crane 
        select vertical_position, crate_value 
        from hoisted_crate 
        returning *
      )
      select array_agg(crate_value order by vertical_position) from crate_on_crane;
  end;

create function unhoist_crates(stack_number int) returns text[]
  begin atomic;
    with 
      unhoisted_crate as (
        insert into stacks 
        select
          stack_number,
          vertical_position - vertical_position_of_lowest_hoisted_crate + vertical_position_of_lowest_free_space,
          crate_value
        from 
          crane,
          lateral (select max(vertical_position) from crane) as _ (vertical_position_of_lowest_hoisted_crate),
          vertical_position_of_lowest_free_space(stack_number)
          order by vertical_position
        returning crate_value
      ),
      crate_off_crane as (
        delete from crane
        returning *
      )
      select array_agg(crate_value order by vertical_position) from crate_off_crane;
  end;

create function move_crates("from" int, "to" int, quantity int) returns text[]
  begin atomic;
    select hoist_crates("from", quantity);
    select unhoist_crates("to");
  end;

-- Running rearrangement procedure

select from rearrangement_procedure, move_crates("from", "to", quantity);

-- select * from stacks order by stack_number, vertical_position;

-- Compute result

select string_agg(crate_value, '' order by stack_number) as highest_crates
from stacks, vertical_position_of_highest_crate(stack_number)
where vertical_position = vertical_position_of_highest_crate;
